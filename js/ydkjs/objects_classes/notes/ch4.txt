<--- INTRO --->
- The mechanics of classes in object-oriented programming are instantiation, inheritance, and (relative) polymorphism.
- These concepts don't really map very naturally to JS's object mechanism.
- Thus, JS developers go to considerable lengths to overcome this using mixins and stuff.

<--- CLASS THEORY --->
- Class- or object-oriented programming stresses that data intrinsically has associated behavior that operates on it.
  - This behavior differs depending on the type and nature of the data.
  - Thus, proper design is to package up (encapsulate) the data and behavior together.
  - This is sometimes called "data structures" in formal computer science.
- An example is that a series of characters is usually called a "string".
  - The characters are the data.
  - But you almost never care about just the data, you want to do things with it too!
  - So, the behaviors that can apply to that data are all designed as methods of a String class.
    - For the example this includes calculating the string's length, appending more characters to it, searching for substrings, etc.
- Any given string is just an instance of the String class.
  - This means it's a neatly collected packaging of both the character data and the functionality we can perform on it.
- Classes also imply a way of classifying a certain data structure.
  - The way this is done is to think about any given structure as a specific variation of a more general base definition.
  - See the Car Example section below.

<--- THE CAR EXAMPLE --->
- A Car can be described as a specific implementation of a more general class of thing called a Vehicle.
- The definition of a Vehicle class might include things like propulsion, the ability to carry people, etc.
  - These would all be the behaviors that are common to all the different types of vehicles from planes to trains to automobiles.
- It does not make sense in our software to redefine the basic essence of "ability to carry people" over and over again for each different type of vehicle.
  - Thus, we define that capacity once in the Vehicle class.
  - Then, when we define the Car class, we simply indicate that it inherits or extends the base defintion from Vehicle.
  - The definition of Car is said to specialize the general Vehicle definition.
- While the Vehicle and Car classes collectively define the behavior by way of methods, the data in an instance would be things like the unique vehicle ID number of a specific car, etc.

<--- POLYMORPHISM --->
- The idea that a general behavior from a parent class can be overridden in a child class to give it more specifics.
- Relative polymorphism lets us reference the base behavior from the overridden behavior.
- Class theory strongly suggests that a parent class and a child class share the same method name for a certain behavior.
  - The idea is that the child method overrides that of the parent differentially.
  - However, doing this in JS code is conducive to frustration and code brittleness.
- See Line 75 for more.

<--- JS "CLASSES" --->
- JS doesn't actually have classes.
- JS has some class-like syntactic elements like the NEW and INSTANCEOF operators and the CLASS keyword!
  - But these simply try to satisfy the pervasive desire to design with classes.
  - The classes you have in other languages are not like the "classes" you're faking in JS.

<--- CLASS MECHANICS --->
- A class is merely an abstract explanation of what anything of that class should do, but it's not itself a thing of that class.
- You must INSTANTIATE the class before you have a concrete data structure THING to work with.

<--- BUILDING --->
- An instance is to a class what a building is to an architectural blueprint.
- A class is a blueprint: to actually GET an object that can be interacted with, we must build (instantiate) something from the class.
    - The end result of such construction is an instance of the class which we can directly call methods on and access any public data properties from.
- The instance is a COPY of all the characteristics described by the class.
- A class is instantiated into an object form by a copy operation.
    - Likewise, subclasses are made with copy operations of properties from a parent class.
- You don't use an object instance to directly access and manipulate its class, but it's usually possible to at least determine WHICH class an instance comes from.
    - It's like how buildings don't usually have their blueprints framed on a wall inside them, but you can find those prints at a public records office or something.

<--- CONSTRUCTOR --->
- Instances of classes are constructed by a special method of the class called a constructor.
    - The constructor usually has the same name as the class.
    - Its job is to initialize any information (state) the instance will need.
- COnstructors pretty much always need to be called with NEW to let the engine know you want to construct a new class instance.

<--- CLASS INHERITANCE --->
- You can define a class that inherits from another class.
- Child classes are specializations of parent classes, which themselves are specializations of your generic object.
- Once a child class is defined, it is separate and distinct from the parent class.
    - The child contains an initial copy of the behavior from the parent, but can then override any of those inherited behaviors.
    - It can even define new behaviors!
- The child/parent metaphor can get confusing because classes are more appropriately thought of as being the DNA of the parent/child rather than the parent/child themselves.
    - We have to make (instantiate) a person out of each set of DNA to actually have a physical person to converse with.

<--- POLYMORPHISM CONT. --->
- Relative polymorphism refers to the idea that any method can reference another method (of the same of different name) at a higher level of the inheritance heirarchy.
- We say "relative" because we're not defining which inheritance level we want to access.
    - Rather, we're referencing it by essentially saying "look one level up".
- A method name can have multiple definitions at different levels of the inheritance chain.
    - These definitions are automatically selected as appropriate when resolving which methods are being called.
- The definition for a method polymorphs (changes) depending on which class (level of inheritance) you are referencing an instance of.
- Understanding these details is necessary to properly contrast similar but distinct behaviors in JS's [[Prototype]] mechanism.
- See more about SUPER at Line 95.
- Do not let polymorphism confuse you into thinking a child class is linked to its parent class.
    - A child class merely gets a copy of what it needs from the parent class.
    - Class inheritance implies copies!

<--- SUPER IN OTHER LANGUAGES --->
- The SUPER keyword is a utility provided by traditional class-oriented languages.
- It is a direct way for the constructor of a child class to reference the constructor of its parent class.
- With real classes, the constructor belongs to the class.
- In JS though, it's the reverse: the "class" belongs to its constructor through `Foo.prototype` type references.
    - This is because the relationship between parent and child exists only between the two .prototype objects of the respective constructors.
    - The constructors themselves are not directly related.
    - Thus, there's no simple way to relatively reference one from the other.
    - ES6 classes "solve" this with SUPER.

<--- SUPER IN JS --->
- When classes are inherited, there is a way for a class itself (not the object instances created from it) to relatively reference the class it inherits from.
- This reference is SUPER!
- It would seem a child class can access behavior in its parent class using a relative polymorphic reference (SUPER).
    - In reality, the child class is just given a copy of the inherited behavior from its parent class.
    - If the child "overrides" a method it inherits, both the original and overridden versions of the method are maintained.
    - Thus, they are both accessible.

<--- MULTIPLE INHERITANCE --->
- Some class-oriented languages allow you to specify more than one parent class to inherit from.
    - Multiple inheritance means each parent class definition is copied into the child class.
- Multiple inheritance raises two big questions: 
    - If multiple parent classes provide a method of the same name, which version of that method would a reference in the child resolve to?
    - Would you always have to manually specify it and lose some of the gracefulness of polymorphic inheritance?
- JS is simpler in that it does not provide a native mechanism for multiple inheritance.
    - Many see it as a good thing because the complexity savings make up for the "reduced" functionality.
    - This doesn't stop developers from trying to fake it in various ways though!

<--- MIXINs --->
- JS's object mechanism does not automatically perform copy behavior when you "inherit" or "instantiate".
    - There are no "classes" in JS to instantiate, only objects.
    - Moreover, objects don't get copied to other objects; they get LINKED TOGETHER (see Chapter 5 notes).
