CHAPTER 5: PROTOTYPES

<--- [[PROTOTYPE]] --->
- Objects in JS have an internal property [[Prototype]].
  - It is simply a reference to another object.
  - Almost all objects are given a non-null value for this property at the time of their creation.
  - It is possible for an object to have an empty [[Prototype]] linkage, but it's not common.
- All of the attempts to emulate class-copy behavior in Chapter 4, labeled as mixins, completely disregard the [[Prototype]] chain mechanism.
- See ../examples/prototype.js

<--- OBJECT.PROTOTYPE --->
- The top end of every normal [[Prototype]] chain is the built-in Object.prototype.
  - This object includes common utilities used all over JS because all normal objects descend from it.
  - These utilities include toString(), valueOf(), hasOwnProperty(), isPrototypeOf(), etc.

<--- SETTING AND SHADOWING PROPERTIES --->
- Setting properties on an object is more nuanced than getting them.
  - See ../examples/setting_shadowing_properties.js
- Shadowing methods leads to ugly explicit pseudo-polymorphism if you need to delegate between them.
- Shadowing can even occur implicitly in subtle ways.
  - See Example C in above file.
- Shadowing in general is more complicated than it's worth, so just avoid it if possible.
  - See Chapter 6 notes for cleaner alternative design patterns.

<--- "CLASS" --->
- So why DOES one object need to link to another object? What's the real benefit?
  - First we must understand what [[Prototype]] is NOT.
  - Only then can we appreciate what is is and how it's useful.
- Again, JS has no real classes, just objects.
  - It is perhaps the only language that can be called object-oriented because it allows an object to be created directly without a class at all!
  - Clases can't describe what an object can do, the object defines its own behavior directly.
  - There's JUST the object.

<--- "CLASS" FUNCTIONS --->
- There is a peculiar behavior in JS that has been abused for years to hack something that looks like classes.
- This behavior hinges on a strange characteristic of functions.
  - All functions by default have a public, non-enumerable property on them called 'prototype'.
  - This property points to an otherwise arbitrary object.
  - See ../examples/class_functions.js

<--- "PROTOTYPAL" INHERITANCE --->
- "Prototypal inheritance" is commonly said to be the dynamic language version of "classical inheritance".
  - It's an attempt to piggyback on the common understanding of what inheritance means in the class-oriented world.
  - However, it paves over its understood semantics to fit dynamic scripting.

<--- DELEGATION --->
- A much more accurate term for JS's object-linking mechanism.
- "Inheritance" implies a copy operation, and JS doesn't copy object properties.
- JS creates a link between two objects, where one object can essentially delegate property/function access to another object.

<--- "DIFFERENTIAL INHERITANCE" --->
- Another term that's sometimes thrown around in JS.
- The idea is that an object's behavior is described in terms of how it's different from a more general descriptor.
- For example, you explain that a car is a type of vehicle, but one that has exactly four wheels.
- You say that instead of going into all the specifics of what makes up a general vehicle (engine, etc.)
- This term kind of fits if you think of any given JS object as the sum total of all behavior that is available via delegation, and in your mind flatten all that behavior into one tangible thing.
- This overlooks the fact that an object is not actually differentially constructed, but is instead built with specific characteristics defined.
  - These characteristics come alongside "holes" where nothing is defined.
  - It is in these holes that delegation CAN take over and fill them in with delegated behavior on the fly.

<--- "CONSTRUCTORS" --->
- See ../examples/constructors.js
