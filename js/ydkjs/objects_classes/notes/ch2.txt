<--- CALL-SITE --->
- The location in code where a function is called (not where it's declared).
- Must be inspected to figure out what a function's THIS is referencing
- Finding the call-site is generally just a matter of asking "Where is this function called from?"
  - Certain coding patterns can obscure the true call-site however.
- It's important to think about the callstack, the stack of functions that have been called to get us to current moment in execution.
  - The call-site we care about is IN the invocation BEFORE the currently executing function!
- See ../examples/call_site.js
- The callstack can be seen using a browser's developer tools!
  - Simply set a breakpoint at the first line of each function whose call-site you want to trace.
  - Or you can just insert the `debugger;` statement at that first line!
  - Once you see the callstack, you can find the function's call-site by looking at the second item from the top!

<--- HOW THE CALL-SITE DETERMINES THE THIS REFERENCE --->
- You must inspect the call-site and determine which of the 4 rules applies.
- In the case that multiple rules could apply, there is an order of precedence that determines which rule comes out on top.

<--- DEFAULT BINDING --->
- Comes from the most common case of function calls: standalone function invocation.
- Can be thought of as the default rule when none of the other rules apply
- See ../examples/default_binding.js

<--- IMPLICIT BINDING --->
- Applies if the call-site has a context object
  - AKA an owning or containing object, but these terms are misleading
- The context object has to be mutated to include a reference on itself to the function
  - This property function reference is then used to indirectly bind THIS to the object.
- See ../examples/implicit_binding.js

<--- IMPLICIT BINDING LOSS WITH CALLBACKS --->
- See ../examples/implicit_binding.js
- It's quite common for callback functions to lose their THIS binding.
- Another thing that can happen is the function to which the callback was passed intentionally changing the THIS binding.
  - Event handlers in popular JS libraries are fond of forcing your callback to have a THIS which points to, say, the DOM element which triggered the event or the event itself.
  - This can be both useful and infuriating. In the case of the latter, this problem can be "fixed" with hard binding.

<--- EXPLICIT BINDING --->
- Forces a function call to use a particular object for its THIS binding.
- Eliminates the need for a property function reference on the object
- Every function you create will be able to invoke the call() and apply() methods to achieve this binding.
  - Both take as a first parameter an object to use for the THIS when the function is invoked.
  - If a primitive value is passed as the THIS binding, it will be wrapped in its object form (new String(), new Boolean(), new Number(), etc.)
    - This is referred to as "boxing".
- See ../examples/explicit_binding.js

<--- HARD BINDING --->
- A variation pattern around explicit binding
- See ../examples/hard_binding.js

<--- API CALL "CONTEXTS" --->
- Many libraries' functions and new built-ins in the JS language and host environment provide an optional parameter usually called "context".
- It's designed as a work-around for you to not have to use bind() to ensure your callback uses a particular THIS.
- See ../examples/api_call_contexts.js

<--- NEW BINDING --->
- In traditional class-oriented languages, constructors are special methods attached to classes.
  - When the class is instantiated with a NEW operator, the constructor of that class is called.
- JS has a NEW operator and the code pattern to use it looks identical to what we see in those class-oriented languages, but there actually isn't any connection between class-oriented functionality and the usage of NEW in JS.
- In JS, constructors are just functions that happen to be called with the NEW operator.
  - They are not attached to classes, nor are they instantiating a class.
  - They're not even special types of functions.
  - They're just regular functions that are essentially hijacked by the use of NEW in their invocation.
- Pretty much any function, including built-in object functions like Number(), can be called with NEW in front of it.
  - This makes that function call a "constructor call".
  - There are really no such thing as "constructor functions" in JS, just construction calls OF functions.
- When a function is invoked with NEW in front of it, otherwise known as a constructor call, the following things are done automatically:
  1. A brand new object is created.
  2. The newly created object is prototype-linked.
  3. The newly created object is set as the THIS binding for that function call.
  4. Unless the function returns its own alternate object, the NEW-invoked function call will automatically return the newly created object.
- See ../examples/new_binding.js

<--- BINDING RULE PRECEDENCE --->
- The precedence of THIS binding rules is as follows, from most to least precedence:
  1. New binding
  2. Explicit/hard binding
  3. Implicit binding
  4. Default binding
- Questions to ask yourself for determining THIS from a function call's call site:
  1. Is the function called with NEW? If so, THIS is the newly constructed object.
  2. Is the function called with call() or apply(), even hidden inside a bind() hard binding? If so, THIS is the explicitly specified object.
  3. Is the function called with a context? If so, THIS is that context object.
  4. Otherwise default the THIS to the global object, or undefined if in strict mode.
- See ../examples/this_binding_precedence.js

<--- WHY NEW OVERRIDING HARD BINDING IS USEFUL --->
- The primary reason for this behavior is to create a function (that can be used with NEW to construct objects) that essentially ignores the THIS hard binding but which pre-sets some or all of the function's arguments.
- One of the capabilities of bind() is that any arguments passed after the first THIS binding argument are defaulted as standard arguments to to the underlying function
  - Essentially, it passes the second argument onwards as parameters to the function you're binding.
  - This is technically called "partial application", which is a subset of "currying".
  - See ../examples/partial_application.js

<--- EXCEPTIONS TO THE BINDING RULES --->
- See ../examples/binding_rule_exceptions.js

<--- IGNORED THIS --->
- If NULL or UNDEFINED is passed as a THIS binding parameter to call(), apply(), or bind(), those values are ignored.
- The default binding rule is applied to the invocation instead.
- It's common to use apply() for spreading out arrays of values as parameters to a function call.
  - ES6 has the ... spread operator which will let you syntactically spread out an array as parameters without needing apply() and an unnecessary THIS binding.
- Similarly, bind() can curry parameters (pre-set values).
- Both apply() and bind() require a THIS binding for the first parameter. If the functions in question don't care about THIS, NULL makes for a good placeholder value.

<--- THE DANGER OF USING NULL AS A THIS PLACEHOLDER --->
- If you ever use that against a function call (ie. a third party library function you don't control) and that function DOES make a THIS reference, the default binding rule means it might inadvertently reference or mutate the global object.
- This can lead to very difficult to diagnose/track-down bugs.

<--- A SAFER THIS THAN NULL --->
- Instead of passing NULL as a placeholder THIS, you can pass an object specifically set up for the THIS that is guaranteed to not create problematic side effects in your program.
- This is referred to as a demilitarized zone (DMZ) object: nothing more than a completely empty, non-delegated object.
- If we always pass a DMZ object for THIS bindings we don't care about, we can be sure any hidden/unexpected usage of THIS will be restricted to that empty object.
  - This insulates the global object from side-effects.
- See ../examples/dmz.js

<--- INDIRECTION --->
- Intentionally or not, you can create "indirect references" to functions.
    - When that function reference is invoked, the default binding rule applies.
- One of the most common ways indirect references can occur is from an assignment.
- See ../examples/indirection.js

<--- SOFTENING BINDING --->
- Hard binding is one strategy for preventing a function call from inadvertently falling back to the default binding rule by forcing it to be bound to a specific THIS.
- The problem with that though is that it greatly reduces a function's flexibility.
    - It prevents manual THIS override with both implicit binding and subsequent explicit binding attempts.
- You can provide a different default for default binding (not the global object or undefined) while still leaving the function able to be manually THIS bound!
    - This can be done via implicit binding or explicit binding technqiues.
- See ../examples/soft_binding_utility.js and ../examples/soft_binding_example.js

<--- LEXICAL THIS --->
- Arrow functions do not abide by the binding rules.
- An arrow function does not have its own THIS.
- Instead, it adopts the THIS binding from the enclosing (function or global) scope.
- See ../examples/arrow_function_this.js
- The lexical binding of an arrow function cannot be overridden, even with NEW.
