<--- OBJECT SYNTAX --->
- Objects come in two forms: the declarative (literal) form and the constructed form.
- See ../examples/object_syntax.js
- Both forms result in exactly the same sort of object.
  - The only real difference is that you can add one or more key/value pairs to the literal declaration.
  - With constructed-form objects, you must addd the properties one by one.
- It's extremely uncommon to use the constructed form for creating objects, so just stick to using object literals.
  - The same will be true for most of the built-in objects.

<--- TYPE --->
- Objects are the general building blocks upon which much of JS is built.
- They are one of the six primary types in JS:
  - string
  - number
  - boolean
  - null
  - undefined
  - object
- Simple primitives (string, number, boolean, null, undefined) are NOT themselves objects.
  - Null is sometimes referred to as an object type, but that's only because of a bug that causes `typeof null` to return 'object' incorrectly.
  - Null is its own primitive type.

<--- NOT EVERYTHING IS AN OBJECT --->
- It's a common misconception that "everything in JS is an object".
- This isn't true!

<--- COMPLEX PRIMITIVES --->
- By contrast, there ARE a few special object subtypes, which we can call "complex primitives".
- Functions are a subtype of object called a "callable object".
  - They are said to be "first-class" in that they are basically just normal objects that can be handled like any other non-callable object.
  - They just have callable behavior semantics bolted on!
- Arrays are also a form of objects with extra behavior.
  - The organization of arrays is slightly more structured than for general objects.

<--- BUILT-IN OBJECTS --->
- There are several other object sub-types that are usually referred to as built-in objects:
  - String
  - Number
  - Boolean
  - Object
  - Function
  - Array
  - Date
  - RegExp
  - Error
- For some of them, their names seem to imply they are directly related to their simple primitive counterparts.
  - Their relationship is more complicated than that, though.
- These built-ins have the appearance of being actual types or even classes, but they are actually just built-in functions.
  - Each can be used as a constructor, with the result being a newly constructed object of the subtype in question.
- See ../examples/built_ins.js

<--- PRIMTIVE TO OBJECT TYPE COERCION --->
- Primitive values themselves do not have properties or methods.
- To do something like find the length of a string, a String object is required.
- JS will automatically coerce the primitive value into its object counterpart though!
  - Thus, you almost never have to explicitly create the Object form of a primitive value.
- This coercion happens for string, number, and boolean primitives created using the literal form.
  - null and undefined have no object wrapper form, only their primitive values.
  - Date values on the other hand have no literal form and can ONLY be created with their constructed object form.
- Objects, Arrays, Functions, and RegExps are all objects regardless of whether the literal or constructed form is used.
  - The simpler literal form is almost universally preferred.
  - The constructed form does offer more options than the literal form in creation and should only be used if you need those options.
- Error objects are rarely created explicitly in code.
  - They are usually created automatically when exceptions are thrown.
  - They can be created with the contructed form, but it's often unnecessary.

<--- CONTENTS --->
- The contents of an object consist of values (of any type) stored at specifically named locations, which we call "properties".
  - Property names are always strings.
  - If any value besides a primitive string is used as a property, it will be converted to a string first.
  - This includes numbers, so be careful not to confuse the use of numbers between objects and arrays where they're used as indices.
  - See Example C in ../examples/contents.js
- "Contents" implies these values are actually stored inside the object, but that's not the case.
  - The engine may very well not store them IN some object container.
  - What IS actually stored in the container are the property names, which act as pointers to where the values are stored.
- See ../examples/contents.js

<--- PROPERTY ACCESS VS KEY ACCESS --->
- See ../examples/contents.js
- Both access the same location and value.
- The . operator requires an Identifier-compatible property name after it.
  - To use a property name like "Super-Fun!" you'd have to go with key access because Super-Fun! is not a valid Identifier name.
- The [''] syntax can take basically any UTF8/unicode compatible string as the name for the property.
  - Because it uses a string's VALUE to specify the location, the program can programatically build up the value of the string.
  - See Example B in ../examples/contents.js

<--- COMPUTED PROPERTY NAMES --->
- The key access syntax is useful if you need to use a computed expression value as the key name.
  - It's not really helpful when declaring objects using the literal syntax though.
- ES6 added computed property names where you specify an expression surrounded by [] in the key-name position of an object literal declaration!
  - See Example D in ../examples/contents.js
- The most common usage for computed property names will probably be for ES6 symbols.
  - See Example E in ../examples/contents.js

<--- PROPERTY VS METHOD --->
- When talking about a property access on an object, some devs like to make a distinction if the value accessed happens to be a function, and so call such properties "methods".
- It's tempting to think of a function as "belonging" to an object, but technically that is not the case.
  - Thus, saying a function that just happens to be accessed on an object reference is automatically a "method" is a semantic stretch.
- It's true that some functions have THIS references in them and that SOMETIMES these THIS references refer to the object reference at the call site.
  - This doesn't really make the function any more a "method" than any other function though
  - Because THIS is dynamically bound at the call site during runtime, its relationship to the object is indirect at best.
- Every time you access a property on an object, that is property access regardless of the type of value you get back.
  - If you happen to get a function from that access, it's not magically a "method" at that point.
  - There is nothing special about a function that comes from a property access outside of possible implicit THIS binding.
- See Example F in ../examples/contents.js
- One could argue that a funtion BECOMES a method.
  - Not at definition time, but during runtime just for that invocation depending on how it's called at its call site.
  - Even this is a bit of a stretch though.
- The safest conclusion is that "function" and "method" are interchangeable in JS.
- Even declaring a function expression as part of an object literal doesn't make that function "belong" to the object.
  - There are still just multiple references to the same function object.

<--- ARRAYS --->
- Arrays also use the [] access form.
- When compared to general objects, they have more structure for how and where values are stored.
  - There are still no restrictions on what type of values are stored though.
- Arrays assume numeric indexing.
  - This means values are stored at locations called indices at non-negative integers.
- See ../examples/arrays.js
- You COULD use an array as a plain key/value object and never add any numeric indices, but this is a bad idea.
  - Arrays have behavior and optimizations specific to their intended use, and likewise with plain objects.
  - Use objects to store key/value pairs and arrays to store values at numeric indices.

<--- DUPLICATING OBJECTS --->
- New JS developers often request that the language have an object duplication feature.
- This would be a little complicated because it's not very clear what, by default, should be the algorithm for duplication.
- See ../examples/object_duplication.js

<--- PROPERTY DESCRIPTORS --->
- Before ES5, JS gave no direct way for your code to inspect or draw any distinction between the characteristics of properties, such as whether it was read-only or not.
- As of ES5 though, all properties are described in terms of a property descriptor.
- See ../examples/property_descriptors.js
- The default values for WRITABLE, ENUMERABLE, and CONFIGURABLE for any given property are all true.
- Object.defineProperty() can be used to add a new property with the desired characteristics.
  - It can also be used to modify an existing property if it's configurable!

<--- WRITABLE--->
- Determines whether or not you can change the property value.
- If you try to modify an unwritable property value in strict mode, an error will be thrown.
- Otherwise, the operation will silently fail.

<--- CONFIGURABLE --->
- The configurable descriptor determines whether or not you can modify a property's descriptor definiton with defineProperty().
- Changing a configurable descriptor to false is a one-way action and can't be undone, be careful with doing so!
- Regardless of strict mode, attempting to redefine a nonconfigurable property will result in an error.
- There is an exception though: even if a property is not configurable, WRITABLE can always be changed from true to false without error.
  - It can't, however, change to true if it's already false.
- An unconfigurable property descriptor also prevents the ability to use the DELETE operator to remove the property.
  - Doing so would fail silently.

<--- THE DELETE OPERATOR --->
- It's only used to delete removable (configurable) object properties directly from the object in question.
- If an object property is the last remaining REFERENCE to some object/function and you delete it, the now unreferenced object/function can be garbage collected.
- Despite this, it is not proper to think of delete as a tool to free up allocated memory as it does in languages such as C and C++.
  - It is just an object property removal operation, nothing more.

<--- ENUMERABLE --->
- Determines if a property will show up if the object's properties are iterated through, such as in a FOR...IN loop.
- Setting to false will keep it from showing up in such enumerations, but it will still be accessible.
- NOTE: The enumeration of an array includes all the numeric indices AND any enumerable properties.
  - Thus, applying a FOR...IN loop on an array can yield unexpected results.
  - It's a good rule of of thumb to only use FOR...IN loops on objects and just use regular FOR loops for arrays.

<--- IMMUTABILITY --->
- It is sometimes desired to make properties or obejcts that cannot be changed accidentally or otherwise, and ES5 added support for that in a variety of ways.
- All of the approaches gone over thus far though create shallow immutability.
  - This means it only affects the object and its direct property characteristics.
  - If the object has a reference to another object, the contents of that object are not affected and remain mutable.
- NOTE: It's not common to create deeply entrenched immutable object in JS programs.
  - If you find yourself wanting to seal or freeze all your objects, you might want to reconsider your program design and make it more robust to potential changes in objects' values.

<--- APPROACHES TO IMMUTABILITY --->
- See ../examples/immutability.js
- Object Constant
  - Setting a property to be both unwritable and unconfigurable can essentially make it a constant.
  - The property cannot be changed, redefined, or deleted.
- Prevent Extensions
  - Use if you want to prevent an object from having new properties added to it while leaving the rest of its properties alone.
- Sealing with Object.seal()
  - Creates a "sealed" object
  - Takes an existing object, calls preventExtensions() on it, and then marks all its existing properties as unconfigurable.
  - You cannot add any more properties nor can you reconfigure/delete any existing ones.
  - You can still modify property values though!
- Freezing with Object.freeze()
  - Creates a "frozen" object
  - Takes an existing object, calls Object.seal() on it, and marks all its data accessor properties as unwritable.
  - Object properties cannot be added, reconfigured, deleted, or modified.
  - The contents of any objects referenced in property values can still be modified, just not the reference itself.
- An object can be "deep frozen" by calling freeze() on it and then recursively iterating over all objects it references and calling freeze() on them as well.
  - You should be careful with this though because it could affect other (shared) objects you're not intending to affect.

<--- [[GET]] --->
- See ../examples/get.js

<--- [[PUT]] --->
- It may be tempting to think that an assignment to a property on an object would just invoke [[Put]] to set or create that property.
- The situation is more nuanced than that though.
- When invoking [[Put]], how it behaves differs based on a number of factors, mostly whether or not the property is already present in the object.
- If the property is present, the [[Put]] algorithm will roughly check:
  1. Is the property an accessor descriptor? If so, call the setter, if any.
  2. Is the property a data descriptor with writable of false? If so, throw a TypeError in strict mode, silently fail otherwise.
  3. Set the value to the existing property as normal.
- If the property is not yet present on the object, [[Put]] is even more nuanced and complex.

<--- GETTERS AND SETTERS --->
- The default [[Put]] and [[Get]] operations for objects completely control how values are set to or retrieved from properties.
- ES5 introduced a way to override part of these default operations through the use of setters and getters.
  - The override doesn't happen on an object level, but on a per-property level.
- Getters are properties that call a hidden function to retrieve a value.
  - When you define a property as a getter, that property will not actually hold a value.
  - Instead, its access will result in a hidden function call to the getter function.
  - The return of that function becomes the result of the property access.
- Setters are properties that call a hidden function to set a value.
  - When you define a setter for a property, an assignment to that property will result in a hidden function call to the setter function.
  - Whatever's on the right side of the = assignment will be passed as the parameter to the function.
- When you define a property to have a setter or getter, its definition becomes an "accessor descriptor" as opposed to a "data descriptor".
  - The value and writable characteristics get ignored.
  - Instead, JS considers the SET and GET characteristics of the property.
  - The configurable and enumerable characteristics are unaffected.
- See ../examples/setters_getters.js
