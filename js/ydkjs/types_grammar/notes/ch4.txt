CHAPTER 4: COERCION

<--- INTRO --->
- Coercion is quite the controversial topic!
- There have been many a debate over whether coercion is a useful feature or a design flaw of the language.
- The overwhelmingly prevalent opinion is that coercion is magical, evil, confusing, and just bad.
- Coercion has its pros and cons and it's up to you to decide whether or not it's appropriate for your program.

<--- CONVERTING VALUES --->
- There are two different terms for converting a value from one type to another:
  - If done explicitly, it's called "type casting".
  - If done implicitly (forced by the rules of how a value is used), it's called "coercion".
- In JS, most people refer to both as "coercion", so it may be more apt to distinguish the two with the terms "implicit coercion" and "explicit coercion".
  - Explicit coercion is when it's obvious from looking at the code that a type conversion is intentionally occurring.
  - Implicit coercion is when the type conversion occurs as a less obvious side effect of some other intentional operation.
  - See Example A in ../examples/explicit_coercion.js.
- The terms "explicit" and "implicit" are relative.
  - Remember that it's rare that you're the only one who'll ever read your code.
  - Even if you're an expert on JS and all its quirks, you must write your code with consideration for others that may have to work on it and that have less experience.
  - What is explicit for one developer may be implicit for another developer!
- JS coercions always result in one of the scalar primitives.
- No coercion can result in a complex value like an object or function.
  - The concept of boxing from Chapter 3 may seem to contradict this, but it's not really coercion in an accurate sense.

<--- ABSTRACT VALUE OPERATIONS --->
- An abstract operation in JS is basically an internal-only operation.

<--- TOSTRING --->
- When any non-string value is coerced to a string, the conversion is handled by the ToString abstract operation.
  - Technically it goes through the ToPrimitive abstract operation, but that will be covered in more detail later.
- Built-in primitive values have natural stringification.
- For regular objects, unless you specify your own, the default toString() will return the internal [[Class]].
  - Ex. "[object Object]"
- If an object has its own toString() method and you use the object in a string-like way, its toString() will be called automatically and the string result of that call will be used instead.
- Arrays have an overridden default toString() that stringifies as the string concatenation of all its values (each stringified themselves) with a comma between each one.
- See Example B in ../examples/explicit_coercion.js

<--- JSON STRINGIFICATION --->
- Serializing a value to a JSON-compatible string value is not the same thing as coercion!
- For most simple values, JSON stringification behaves exactly the same as toString() conversions, except the serialization result is ALWAYS a string.
  - These values include strings, numbers, booleans, and null.

<--- JSON-SAFE VALUES --->
- Any JSON-safe value can be stringified with JSON.stringify().
- The following values are NOT JSON-safe:
  - undefined
  - Functions
  - Symbols
  - Objects with circular references
- JSON.stringify() will automatically omit undefined, function, and symbol values when it comes across them.
  - If such a value is found in an array, that value is replaced by NULL so as to preserve the original array indices.
  - If such a value is found in an object, that property will simply be excluded.
  - See Example A in ../examples/json.js

<--- TOJSON() --->
- If an object value has a toJSON() method defined, this method will be called first to get a value to use for serialization.
  - This is helpful if you intend to JSON stringify an object that may contain non JSON-safe values!
  - See Example B in ../examples/json.js
- It's a common misconception that a toJSON() method should return the JSON stringification representation.
  - Unless you want to stringify the string itself though, which you likely won't, this is incorrect!
  - You should just return an object of whatever type of object you're trying to stringify and let JSON.stringify itself handle the stringification.
  - toJSON() should be interpreted as "to a JSON-safe value suitable for stringification" rather than "to a JSON string".

<--- JSON REPLACER --->
- An optional second argument can be passed to JSON.stringify() that is called the replacer.
- It's used to customize the recursive serialization of an object by providing a filtering mechanism for which properties should and should not be included.
  - It works similarly to how toJSON() can prepare a value for serialization.
- Replacer can be either an array or a function.
- If replacer is an array, it should be an array of strings.
  - Each string should specify a property name that is allowed to be included in the serialization of an object.
  - If a property exists that isn't in this list, it will be skipped.
- If replacer is a function, it will be called once for the object itself and then once for each property in the object.
  - Each time is passed two arguments: key and value.
  - To skip a key in the serialization, return undefined.
  - Otherwise, return the value provided.
- See Example C in ../examples/json.js

<--- JSON SPACE --->
- A third optional argument called space can also be passed to JSON.stringify(). 
- It's used as indentation for prettier human-friendly output.
- It can be a positive integer to indicate how many space characters can be used at each indentation level,
- OR it can be a string, in which case up to the first 10 characters will be used for each indentation level.

<--- TONUMBER --->
- If any non-number value is used in a way that requires it to be a number, such as in a mathematical operation, the conversion is handled by the ToNumber abstract operation.
- Examples:
  - true become 1
  - false becomes 0
  - undefined becomes NaN
  - null becomes 0
- ToNumber for a string value essentially works for the most part like the rules/syntax for numeric literals.
  - If it fails, the result is NaN instead of a syntax error as with number literals.
  - Another thing to be aware of is that 0-prefixed octal numbers, while valid as number literals, are not handled as octals in this operation but rather as just normal base-10 decimals.
  - Refer back to Chapters 2 and 3 for a refresher!
- Before going through the ToNumber abstract operation, objects and arrays will first be converted to their primitive value equivalents.
  - They are then coerced into numbers according to the ToNumber rules just mentioned.
  - Refer to the TOPRIMITIVE section below.

<--- TOPRIMITIVE --->
- Object and arrays will first be converted to their primitive value before being coerced into something like a number.
- The ToPrimitve abstract operation will consult the array/object in question to see if it has a valueOf() method.
- If valueOf() is available and returns a primitive value, THAT value is used for the coercion.
- If valueOf() is NOT available but toString() is, then the latter will provide the value for coercion.
- If neither can provide a primitive value, then a TypeError is thrown.
- See Example C in ../examples/explicit_coercion.js

<--- TOBOOLEAN --->
- JS has actual keywords TRUE and FALSE, and they behave exactly as you'd expect of boolean values.
- It's a common misconception that the values 1 and 0 are identical to true/false.
  - This is true in other languages, but not JS!
- In JS, the numbers are numbers and the booleans are booleans.
  - You can coerce 1 to true (and vice versa) or 0 to false (and vice versa), but they're not the same.

<--- TRUTHY AND FALSY VALUES --->
- All of JS's values can be divided into two categories:
  1. Values that become false if coerced into a boolean
  2. Values that become true if coerced into a boolean
- The importance of truthiness and falsiness is in understanding how a value will behave if you coerce it (either explicitly or implicitly) into a boolean value.

<--- FALSY VALUES --->
- JS defines a specific, narrow list of values that will result in false if coerced into a boolean value:
  - undefined
  - null
  - false
  - +0, -0, and NaN
  - ''

<--- TRUTHY VALUES --->
- JS doesn't really define a list of truthy values like it does for falsy ones.
- Basically, anything not explicitly on the falsy list is truthy.
- Really, the only thing the spec says explicitly on the matter is that all objects are truthy.
  - Is that really the case though?
  - See section FALSY OBJECTS below!

<--- FALSY OBJECTS --->
- You might be tempted to think a falsy object implies an object wrapper around a falsy value such as '', 0, or false.
  - See Example A in ../examples/falsy_objects.js
- In actuality, falsy objects can show up in your JS program, but are not actually a part of JS themselves.
- There are cases where browsers have created they own sort of exotic values behavior, namely this idea of "falsy objects", on top of regular JS semantics.
- A "falsy object" is a value that looks and acts like a normal object (with properties, etc.), but when it's coerced into a boolean, it becomes false.

<--- DOCUMENT.ALL --->
- This is the most well-known case of a falsy object.
- It is an array-like object provided by the DOM (not the JS engine itself) and exposes elements in a page to your JS program.
- document.all was never really "standard" and has long since been deprecated.
  - There are too many legacy codebases that rely on using it for it to be removed though.
- It used to behave like a normal object in that it would act truthy, but not anymore!
- It made to act falsy so that coercions of it into a boolean (like in if statements) could be used to detect old, nonstandard IE.
  - Essentially, if (document.all) evaluates to true, then it's IE.
  - This led to a bad browsing experience for users of modern versions of IE though.
  - IE decided it doesn't want old (document.all) code to work anymore so that users in modern IE get new, standards-compliant code logic.
  - So, they decided to pretend document.all is falsy.
- Bottom line: IE sucks.

<--- EXPLICIT COERCION --->
- Refers to type conversions that are obvious and explicit.
- You want to identify patterns in your code where you can make it clear and obvious that you're converting a value from one type to another so as to minimize confusion for future developers!
- The more explicit you are, the more likely someone later will be able to read your code and understand your intent without any unnecessary effort.

<--- EXPLICITLY: STRINGS <-> NUMBERS --->
- WAYS TO DO IT
  1. The built-in String() and Number() functions
    - You want to do this WITHOUT the NEW keyword in front so as to not create object wrappers!
  2. The toString() method on number.
    - There's some hidden implicitness here in that JS automatically boxes the number in an object wrapper before calling toString().
    - Again, this is because primitive values themselves do not have methods.
    - You may call this way of coercion "explicitly implicit".
  3. The unary + operator on a string.
    - Instead of performing addition or string concatenation, unary + explicitly coerces its operand into a number.
    - This may not be explicit to some developers though because not everyone knows + can be used as a unary operator!
    - There are also cases where it can look very confusing.
    - In the open-source JS community though, it has been generally accepted that this is a form of explicit coercion.
    - It's your call, really.
  4. The - unary operator on a string.
    - This works exactly the same as + except the sign of the number is flipped.
    - It comes with the same caveats as + as well.
    - Note that you cannot put two - unary operators next to each other or else it will be interpreted as a prefix decrement!
      - This can be fixed by putting a space between the -'s though!
- Avoid using unary +/- coercion operators immediately adjacent to other operators!
  - It just adds confusion, which is the exact opposite of what we're trying to achieve with explicit coercion!

<--- DATE TO NUMBER --->
- Another common usage of the unary + operator is to coerce a Date object into a number.
  - The result is the Unix timestamp representation of the date/time value.
  - It's the milliseconds elapsed since January 1, 1970 00:00:00 UTC.
  - The most common usage of this is to get the current moment as a timestamp like `timestamp = +new Date()`.
- A noncoercive approach that is more preferable would be using the getTime() on a Date object because it's even more explicit.
- An even more preferable noncoercive option is to use ES5's Date.now() function.
- See Example D in ../examples/explicit_coercion.js for usage exmaples.
- It's recommended that you use the noncoercive methods to get numbers from date objects.
  - Use Date.now() for current timestamps.
  - Use new Date(...).getTime() for getting a timestamp for a specific date/time that may not be current.

<--- BITWISE OPERATORS --->
- Bitwise operators are defined only for 32-bit operations, which means they force their operands to conform to 32-bit value representations.
  - See Section TOINT32 below for more info.
- Using bitwise operators like | or ~ with certain special number values produce a coercive effect that results in a different number value.
  - This is not technically coercion itself though since type doesn't change.
- As with every other coercion shown thus far, use ~ and ~~ only if you're sure everyone who reads/writes your code is properly aware of how these operators work!

<--- THE CURIOUS CASE OF THE ~ --->
- The ~ operator (bitwise NOT) is a coercive operator that is often overlooked and usually very confused.
- The ~ operator first "coerces" a value into a 32-bit number and then performs bitwise negation (flipping each bit's parity).
- The point is that ~ performs a two's complement.
  - ~x is roughly the same as -(x + 1).
  - In other words, ~ produces the falsy number -0 for just the -1 input value, and a truthy number for any other number input.
- It's common in a language like C for a return of -1 to signify the failure of a function.
  - JS adopted this convention in methods like String.indexOf(...), which returns -1 if the substring is not found.
  - It is commonly called a "sentinel value" because it's given an arbitrary semantic meaning within the greater set of values of its same type.
- See Example E in ../examples/explicit_coercion.js

<--- DOUBLE TILDE --->
- Some developers use the double tilde ~~ to truncate the decimal part of a number ("coerce" it into an integer).
- The first ~ applies the ToInt32 "coercion" and does the bitwise flip.
- The second ~ does another bitwise flip, flipping all the bits, and thus the number itself, back to the original state sans decimals.
- It works the same as Math.floor(...) on positive values only.
- Additionally, it only works reliably on 32-bit values.
- `x | 0` can generally be used to truncate decimal values into 32-bit integers with slightly less effort.
  - Use ~~ only when you need a truncation to have operator precedence over another operation.

<--- TOINT32 --->
- The abstract operation ToInt32 first and foremost does a ToNumber coercion.
- This means if the value is "123", then it's goig to become 123 before the ToInt32 rules are applied.

<--- EXPLICITLY PARSING NUMERIC STRINGS --->
- A similar outcome to coercing a string to a number can be achieved by parsing a number out of a string's character contents.
- Parsing should not be seen as a substitute for coercion, each has their own purpose.
  - Parse a string as a number when you don't know/care what other non-numeric characters there may be in the string.
  - Coerce a string into a number when the only acceptable values are numeric and something like "42px" should be deemed an invalid number.
- Only string values should be passed to parseInt().
  - If you pass a non-string, the value passed will automatically be coerced into a string first.
  - This is clearly a kind of hidden implicit coercion and it's a bad idea to rely on such a behvaior in your program.
- parseInt(...) can be passed a second argument (radix) that specifies the base to use.
  - It defaults to base-10 unless the string is prefixed with "0x", in which case it uses base-16.
  - Be careful if your code has to run in pre-ES5 environments, in which case you need to pass 10 for the radix.
- See Example F in ../examples/explicit_coercion.js

<--- EXPLICITLY CONVERTING ANY VALUE TO A BOOLEAN --->
- WAYS TO DO IT
  1. Boolean(...) without new keyword in front of it
    - While this way is certainly explicit, it's not at all common or idiomatic.
  2. The unary ! operator
    - Be aware that while it DOES coerce a value to a boolean, it also flips the value from truthy to falsy and vice versa!
    - A lot of developers use !! to cancel the negation.
- Any ToBoolean coercion would happen implicitly if used in a boolean context such as in an if statement.
  - The goal is to explicitly force the value to a boolean to make it clearer that the coercion is intended though.
- An example use case for explicit ToBoolean coercion is if you want to force a true/false value coercion in the JSON serialization of a data structure.
  - See Example G in ../examples/explicit_coercion.js

<--- THE TERNARY ? : OPERATOR --->
- Consider the expression `return a ? true : false`.
- On its surface, it looks like a form of explicit ToBoolean coercion.
- However, there is a hidden implicit coercion occurring in that a has to first be coerced into a boolean to perform the truthiness test.
- You may call this "explicitly implicit".
- It is suggested that you avoid this idiom entirely in JS.
  - It offers no real benefit and also masquerades as something it's not.
- Boolean(a) and !!a are much better as explicit coercion options.

<--- IMPLICIT COERCION --->
- Refers to type coercions that are hidden, with non-obvious side effects that implicitly occur from other actions.
  - In other words, they're any type conversions that aren't obvious to you.
- The majority of complaints about JS and JS coercion are actually aimed at implicit coercion.
  - JS is not bad because you can do weird stuff with coercion. 
  - A DEVELOPER is bad if they do weird stuff with coercion.
- Implicit coercion can be so much more than just "the bad kind of coercion" though!
- The goals of implicit coercion can be boiled down to reducing the following:
  1. Verbosity
  2. Boilerplate (pieces of code copied again and again throughout a program)
  3. Unnecessary implementation detail that clutters code and distracts from the more important intent.

<--- SIMPLIFYING IMPLICITLY --->
- It can be argued that implicit coercion aids in the readability of your code by abstracting or hiding away unnecessary details.
- There are still plenty of evils lurking around implicit coercion that will harm your code too much to justify any readability improvements.
- You have to learn to avoid such constructs.
- Many devs believe that if a mechanism can do some useful thing A but can also be abused/misused too do some awful thing Z, then the mechanism should be thrown out altogether just to be safe.
  - Potential abuses of a mechanism are not sufficient evidence to condemn the mechanism.
  - Don't ever think that your programming langauge should protect you from yourself.
- It doesn't have to be like that for implicit coercion though and you should learn to embrace its good parts!

<--- IMPLICIT COERCION BETWEEN STRINGS AND NUMBERS --->
- It's a common misconception that, when using the + binary operator, it will assume string concatenation if one or both operands is a string.
  - Essentially, if either operand is a string (or becomes one via the ToPrimitive operation), the operation will be string concatenation.
  - Otherwise, it's always numeric addition.
- You can coerce a number to a string simply by adding the number and an empty string, like `a + ''`.
 - Be aware that this method invokes the valueOf() method of a, whose value is then converted to a string with ToString.
 - In contrast, String(a) invokes the toString() method of a directly.
 - Both approaches result in a string, but if you're using an object instead of a regular primitive value, you may not necessarily get the same string value!
- If a is a string, it can be coerced into a number via:
  1. a - 0
  2. a * 1
  3. a / 1
- As with +, when an operand on either side of a '-' is not a primitive, it is converted to one via ToPrimitive.
  - valueOf() will be referenced first with toString() as a fallback.
- See Example A in ../examples/implicit_coercion.js

<--- IMPLICITLY COERCING BOOLEANS INTO NUMBERS --->
- A case where implicit coercion can really shine is in simplifying certain types of complicated boolean logic into simple numeric addition.
- See Example B in ../examples/implicit_coercion .js

<--- IMPLICIT BOOLEAN COERCION --->
- Expression operations that require/force (implicitly) a boolean coercion:
  1. The test expression in an if (...) statement.
  2. The test expression (second clause) in a for (... ; ... ; ...) header.
  3. The test expressions in while (...) and do...while(...) loops.
  4. The test expression (first clause) in ? : ternary expressions.
  5. The left-hand operand to the || and && operators.
- Any value used in these contexts that is not already a boolean will be implicitly coerced to a one via ToBoolean.

<--- || AND && --->
- Unlike in other languages, || or && do not actually result in a logic value (aka a boolean) in JS.
- Rather, they result in the value of one (and only one) of their two operands.
- They would be more aptly referred to as "operand selector operators" than "logical operators".
- Both || and && perform a boolean test on the left-hand operand, which is coerced to a boolean if not already one.
  - ||
    - If the test is true, the left-hand operand is selected.
    - If it's false, the value of the right-hand operand is selected.
  - &&
    - If the test is true, the right-hand operand is selected.
    - If it's false, the left-hand operand is selected.
  - The result is always the underlying value of one of the operands, not the (possibly coerced) result of the test.
  - See Example C in ../examples/implicit_coercion.js
- An extremely common and helpful usage of this behavior is for providing backup default values and for "guarding" expressions.
  - See Example D in ../examples/implicit_coercion.js for an example of the former.
  - See Example E in ../examples/implicit_coercion.js for an example of the latter.

<--- SYMBOL COERCION --->
- EXPLICIT symbol-to-string coercion is allowed, but implicit coercion of the same throws an error.
- Symbol values cannot coerce to a number at all and an error is thrown either way.
- Symbols CAN however be coerced into booleans (always true).
- It's going to be exceedingly rare for you to need to coerce a symbol value though, so you likely don't have to think about these.
- The way they're typically used, as object properties that avoid collisions, will likely not call for coercion on a normal basis.

<--- LOOSE EQUALS VS STRICT EQUALS --->
- Loose equals is the == operator.
- Strict equals is the === operator.
- A very common misconception is that "== checks values for equality while === checks both values and types for equality".
- In reality, the difference is that == allows coercion in the equality comparison while === disallows it.
- Both == and === check the types of their operands, the difference is in how they respond if the types don't match.

<--- EQUALITY PERFORMANCE --->
- The performance difference between == and === is negligible.
- If you're comparing two values of the same types, == and === use an identical algorithm.
- When choosing one of the two operators for a comparison between values of different types, the question you should be asking yourself is, "Do I want coercion or not when I compare these two values?"

<--- ABSTRACT EQUALITY WITH == --->
- If the two values being compared are the same type, they are compared via identity as you'd expect.
  - Exceptions to this rule:
    1. NaN is never equal to itself.
    2. 0 and -0 are equal to each other.
- If two objects (including functions and arrays) are being compared, they are only equal if they both reference the same object.
  - NOTE: === behaves identically in this scenario.
- If the two values being compared are different types, one or both of the values need to be implicitly coerced.
  - This is so that both values end up as the same type and can then be compared via identity.
- != behaves the same as ==, except the result is negated.

<--- COMPARING A STRING TO A NUMBER WITH == --->
- The string will first be coerced into a number, after which a comparison via identity occurs.

<--- COMPARING ANYTHING TO A BOOLEAN WITH == --->
- The boolean will first be coerced into a number.
- If the types are still different, the coercion algorithm is reconsulted until they're not, after which a comparison via identity occurs.
- Because of this ToNumber coercion, comparisons like `a == true` and `a == false` would not behave like you'd expect them to.
  - true will always be coerced to 1, and false to 0.
  - Avoid loose equality with booleans altogether and just don't use == for such comparisons.
  - Use === instead!

<--- COMPARING NULL TO UNDEFINED WITH == --->
- null and undefined equate/coerce only to each other (as well as themselves).
- They do not equate and cannnot coerce to any other value in the language.
- Essentially, null and undefined can be treated as the same value when loosely compared.
  - `if (a == null)` will pass if a is either null or undefined.
  - Code readability was improved in a reliably safe way!
  - The strictly compared form of this check, `if (a === undefined || a === null)`, is uglier and a little bit less performant.

<--- COMPARING AN OBJECT TO A SIMPLE SCALAR PRIMITIVE WITH == --->
- The object is coerced to a primitive via ToPrimitive, after which a comparison via identity occurs.
  - See Section TOPRIMITIVE above.
- An object wrapper around a primitive value would be unwrapped, after which the underlying primitive value is used in the comparison.
  - Exceptions where this comparison wouldn't work:
    1. null and undefined because they have no object wrapper equivalent
      - `Object(null)` and `Object(undefined)` are essentially the same as `Object()`.
    2. NaN because it can never equal itself

<--- GOTCHAS/FALSE POSITIVES WITH == --->
- See Example F in ../examples/implicit_coercion.js

<--- SAFELY USING IMPLICIT COERCION --->
- Examine your program and reason about what values can show up on either side of a == comparison.
- To effectively avoid issues with such comparisons, adhere to the following:
  1. If either side of the comparison can have TRUE or FALSE values, DON'T EVER USE ==.
  2. If either side of the comparison can have [], "", or 0 values, Seriously Consider not using ==.
- The question of == vs === is "Should you allow coercion for a comparison or not?"
- There are lots of cases where such coercion can be helpful in that it allows you to more tersely express some comparison logic.
- There are really only a few cases where implicit coercion is truly dangerous. In those places, use === for safety's sake.

<--- ABSTRACT RELATIONAL COMPARISON --->
- So what happens in a comparison like `a < b`?
- The Abstract Relational Comparison algorithm divides itself into two parts:
  1. What to do if the comparison involves two string values
  2. Every other scenario
- The algorithm is only defined for `a < b`. `a > b` is handled as `b < a`.
- If the values are not both strings, the algorithm first calls ToPrimitive on both values.
  - If the return result of either call is not a string, then both values are coerced to numbers using ToNumber, after which they are compared numerically.
  - Similar caveats for -0 and NaN apply here as they do in ==.
- If both values ARE strings, simple alphabetic comparison on the characters is performed.
  - The string that would appear later in alphabetical order is greater.

<--- OBJECT RELATIONAL COMMPARISON --->
- See Example G in ../examples/implicit_coercion.js
- You've probably been thinking about <= as meaning "less than or equal to".
- JS more accurately considers <= as "not greater than".
- There is no "strict relational comparison" as there is for equality, so there's no way to prevent implicit coercion from occuring.
- All you can do is ensure that both values are the same type explicitly before making the comparison.

<--- REVIEW --->
- Explicit coercion improves readability and maintainability of code by reducing confusion.
- Implicit coercion can also improve the readability of code.
- Especially for the implicit kind, coercion must be used responsibly and consciously.
- Know why you're writing the code you're writing and how it works.
- Strive to write code that others will easily be able to learn from and understand as well.
- Remember explicitness/implicitness is relative, something that's obvious for one developer may not be to another!

