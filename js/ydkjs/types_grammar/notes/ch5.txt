CHAPTER 5: GRAMMAR

<--- INTRO --->
- You may think you know how to write JS, but there's an awful lot of nuance to various part of the language grammar that lead to confusion and misconception.
- The grammar for JS is a structured way to describe how the syntax (operators, keywords, etc.) fits together into well-formed, valid programs.

<--- STATEMENTS AND EXPRESSIONS --->
- Consider the English language:
  - A sentence is a complete formation of words that expresses a thought.
  - Sentences are made of phrases.
  - The phrases are connected together with conjunction words or punctuation marks.
  - Some phrases can stand on their own, while others are incomplete and don't accomplish much by themselves.
- Parallels can be drawn in JS:
  - Statements are sentences.
  - Expressions are phrases.
  - Operators are the conjunctions/puncutation.
- As an example, declaration statements declare a variable and optionally assign a value to it:
  - `var a = b`;
    - `a = b` is considered an assignment expression.
  - `let c`;

<--- STATEMENT COMPLETION VALUES --->
- All statements have completion values, even if that value is undefined.
- When you execute a statement in the browser console, the console will report the statement's completion value by default.
  - That's why you see "undefined" a lot when you run things in the console!
- Example: the statement `var b = a` returns a completion value of undefined.
  - Although an assignment expression like `b = a` returns the value that was assigned (a in this case), var statements were made to return undefined in the spec.
- Any regular { ... } block has a completion value of the last contained statement/expression's completion value.
  - So if an assignment of `b = 42` were the last statement in your block, then the entire block's completion value would be 42.

<--- CAPTURING COMPLETION VALUES --->
- eval() returns the completion value of whatever code it runs.
  - You know not to use eval() though.
- There is a proposal for ES7 called the do expression, which should execute a block and return the final completion value.
- For now, completion values are not much more than trivia.
- They're probably going to take on more significance as JS evolves though!

<--- EXPRESSION SIDE EFFECTS --->
- Most expressions don't have them.
- The most common example of an expression with possible side effects is a function call expression.
- See Example A in ../examples/expression_side_effects.JS

<--- ++ and -- --->
- Postfix (a++, a--) returns `a` first and then increments it.
- Prefix (++a, --a) increments `a` first and then returns it.
- ++a++ is not legal syntax, you'd get a reference error.
- See Example B in ../examples/expression_side_effects.js

<--- THE , OPERATOR --->
- `,` is known as the statement-series operator.
- It allows you to string together multiple standalone expression statements into a single statement.
- See Example C in ../examples/expression_side_effects.js

<--- THE DELETE OPERATOR --->
- Another side-effecting operator.
- It returns true if the object property or array slot can be deleted, and false otherwise.
- Obviously, its side effect is that it removes the property or array slot in question.
- See Example D in ../examples/expression_side_effects.js

<--- THE = ASSIGNMENT OPERATOR --->
- Another side-effecting operator.
- Returns the value that was just assigned (the right-hand operand).
- Example: `a = b += 2`
  1. `b += 2` is processed first as `b = b + 2`
  2. The result of that, `b + 2` is then assigned to `a`.
- This is particular useful for chained assignments like `a = b = c = 42`.
- This won't work for something like `var a = b = 42` unless a separate `var b` had been declared elsewhere in the scope.
  - Depending on strict mode, either an error will be thrown or an accidental global will be created.

<--- OPERATOR PRECEDENCE --->
- Refer to the Operator Precedence page on MDN.

<--- SHORT-CIRCUITING --->
- In Chapter 4, we mentioned the "short-circuiting" nature of the && and || operators.
- Basically, what this means is that the right-hand operand will not be evaluated if the left-hand operand is sufficient to determine the outcome of that operation.
- In `a && b`, b will not be evaluated if a is falsy.
- In  `a || b`, b will not be evaluated if a is truthy.
- See ../examples/short_circuiting.js

<--- ASSOCIATIVITY --->
- Operators are either left-associative or right-associative when grouped with like operators.
  - This refers to whether grouping happens from the left or from the right.
  - Grouping is NOT the same thing as left-to-right or right-to-left processing/evaluation!
- Refer to the Operator precedence page on MDN.

<--- DISAMBIGUATION --->
- As with explicit and implicit coercion, use operator precedence and associativity where it leads to shorter and cleaner code.
- Use manual () grouping in places where it helps create clarity and reduce confusion.

<--- ERRORS --->
- JS has different subtypes of errors (TypeError, ReferenceError, SyntaxError, etc.)
- The JS grammar defines certain errors to be enforced at compile time (early errors), as compared to all other errors that happen during runtime.
- Any straight-up syntax error is an early error.
  - The grammar also defines things that are syntactically valid but disallowed nonetheless.
  - Since execution of your code has not begun yet, these errors are not catchable with try...catch.
  - They will just fail the parsing/compilation of your program.

<--- TRY...FINALLY --->
- TRY only requires either CATCH or FINALLY, though both can be present if needed.
- The code in the FINALLY clause always runs right AFTER the TRY (and CATCH if it's present) clause finishes and BEFORE any other code runs.
- If there's a return statement inside a TRY clause, the calling code that receives the value runs AFTER the FINALLY.
  - See Example A in ../examples/try_finally.js
- The same behavior can be observed when there's a THROW inside of a TRY clause.
  - See Example B in ../examples/try_finally.js
- If an exception is thrown inside a FINALLY clause, it will override as the primary completion of that function.
  - If a previous return in the TRY block had already set a completion value for the function, that value will be abandoned.
  - See Example C in ../examples/try_finally.js
- Any return inside a FINALLY clause is also able to override a previous RETURN from the TRY or CATCH clause, but only if the RETURN keyword is explicitly called.
  - See Example D in ../examples/try_finally.js
- ES6 adds a yield statement in generators, which in some ways can be seen as an intermediate return statement.
  - Unlike a return though, a yield isn't complete until the generator is resumed, which means a `try { .. yield .. }` has not completed.
  - An attached FINALLY clause will not run right after the yield like it does with a return.

<--- SWITCH --->
- See Example A in ../examples/switch.js for a syntax example.
- The matching that occurs with each case expression is identical to the === algorithm.
  - See Example B in ../examples/switch.js for an example of what to do if you want to allow coercion in the comparisons.
- The default case does not strictly have to be at the end of the switch clause.
  - If no matches are found and the default case is not last, the flow of the code will jump back up to the default case and start executing the code there.
  - If there's no break in the default case, the code will then continuing executing top-down from the default case until it does encounter a break or it reaches the end of the switch clause.
  - If you find yourself wanting to create such a circular logic flow in your code, make sure to include plenty of code comments to explain what you're up to!
